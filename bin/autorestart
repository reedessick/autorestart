#!/usr/bin/env python

__description__ = "a simple script that monitors a specific command line and will restart the process if necessary. This is meant to be run under cron and therefore starts from scratch periodically."
__author__ = "Reed Essick <reed.essick@gmail.com>"
__doc__ = "\n\n".join([__description__, __author__])

#-------------------------------------------------

import os
import time

from argparse import ArgumentParser

### non-standard libraries
from autorestart import utils

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

# monitoring arguments
mgroup = parser.add_argument_group('monitoring options')

mgroup.add_argument('cmdline', nargs=1, type=str,
    help='search for this command in the process table. The command line should be specified as one big string, and we specifically extract only a single argument as the command line.')
mgroup.add_argument('-e', '--env', default=None, type=str,
    help='path to an environmental setup script that will be run before we restart any processes. \
DEFAULT=None (no environment sourced)')

mgroup.add_argument('-n', '--num-instances', default=utils.DEFAULT_NUM_INSTANCES, type=int,
    help='maining this number of instances of --cmd. \
DEFAULT=%d'%utils.DEFAULT_NUM_INSTANCES)

mgroup.add_argument('-N', '--num-trials', default=utils.DEFAULT_NUM_TRIALS, type=float,
    help='stick around and check for the process\'s existence this number of times. \
If infty is specified, will persist indefinitely. \
DEFAULT=%d'%utils.DEFAULT_NUM_TRIALS)
mgroup.add_argument('-s', '--cadence', default=utils.DEFAULT_CADENCE, type=float,
    help='if --num-trials > 1, check for process existence very --cadence seconds. \
DEFAULT=%.3f'%utils.DEFAULT_CADENCE)

# logging options
lgroup = parser.add_argument_group('logging options')

lgroup.add_argument('-v', '--verbose', default=False, action='store_true',
    help='route output to the terminal in addition to the log file.')
lgroup.add_argument('-L', '--log-level', default=utils.DEFAULT_LOG_LEVEL, type=int, 
    help='DEFAULT=%d'%utils.DEFAULT_LOG_LEVEL)

lgroup.add_argument('-o', '--out-dir', default=utils.DEFAULT_LOG_DIR, type=str,
    help='the directory into which STDOUT and STDERR files are written upon automatic restart. \
DEFAULT=%s'%utils.DEFAULT_LOG_DIR)
lgroup.add_argument('-l', '--log-dir', default=utils.DEFAULT_LOG_DIR, type=str,
    help='the directory in which we create the log file. \
DEFAULT="%s"'%utils.DEFAULT_LOG_DIR)
lgroup.add_argument('-t', '--tag', default=utils.DEFAULT_TAG, type=str,
    help='a tag to identify this monitoring process. \
DEFAULT="%s"'%utils.DEFAULT_TAG)

# alerting options
agroup = parser.add_argument_group('alerting options')

agroup.add_argument('-r', '--recipient', default=utils.DEFAULT_RECIPIENTS, type=str, action='append',
    help='email address of those to be alerted when a process is restarted. \
Can be repeated to specify multiple recipients. \
DEFAULT=%s'%(utils.DEFAULT_RECIPIENTS))

args = parser.parse_args()

#------------------------

args.out_dir = os.path.abspath(args.out_dir)
args.log_dir = os.path.abspath(args.log_dir)

for path in [args.out_dir, args.log_dir]:
    if not os.path.exists(path):
        try:
            os.makedirs(path)
        except OSError: ### already exists, may be due to another process creating the directory
            pass

args.cmdline = args.cmdline[0].split() ### FIXME: this may be fragile if there are spaces in the arguments of the command line to be tracked...

#-------------------------------------------------

### get logger
logger = utils.logger(tag=args.tag, directory=args.log_dir, log_level=args.log_level, verbose=args.verbose)

### check process table
utils.autorestart(
    args.cmdline,
    env=args.env,
    num_instances=args.num_instances,
    directory=args.out_dir,
    recipients=args.recipient,
    logger=logger,
)
args.num_trials -= 1

### repeat this for some number of trials
if args.num_trials > 0:
    sleep_string = 'sleeping for %.3 sec'%args.cadence ### define this once outside the loop
    while args.num_trials > 0:
        logger.info(sleep_string)
        time.sleep(args.cadence)

        utils.autorestart(
            args.cmdline,
            env=args.env,
            num_instances=args.num_instances,
            directory=args.out_dir,
            recipients=args.recipient,
            logger=logger,
        )
        args.num_trials -= 1
